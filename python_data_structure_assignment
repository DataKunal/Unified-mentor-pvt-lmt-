{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMp3nsJhMtRHOGzJvvAysGd",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DataKunal/Unified-mentor-pvt-lmt-/blob/main/python_data_structure_assignment\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7LADwUMMM85Q",
        "outputId": "a4748e65-ea7b-4b92-d102-f1985959fcf0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[]\n",
            "<class 'list'>\n",
            "5\n",
            "R\n",
            "Python\n",
            "SAS\n",
            "Scala\n",
            "42\n",
            "Python\n",
            "<class 'str'>\n",
            "['R', 'Python', 'SAS', 'Scala', 'Java']\n",
            "['Red', 'Orange', 'Blue', 'White', 'Black']\n",
            "['Red', 'Orange', 'Blue', 'White', 'Black']\n",
            "7 ['Red', 'Orange', 'Blue', 'White', 'Black', 'Grey', 'Sky Blue']\n",
            "['Black', 'Blue', 'Grey', 'Orange', 'Red', 'Sky Blue', 'White']\n",
            "['Coronavirus', 'Caused', 'Lockdowns', 'Around', 'The', 'World.']\n",
            "['coronavirus', 'caused', 'lockdowns', 'around', 'the', 'world.']\n",
            "False\n",
            "['coronavirus', 'caused', 'lockdowns', 'around', 'world.']\n",
            "['coronavirus', 'caused', 'lockdowns', 'around']\n",
            "coronavirus caused lockdowns around world.\n",
            "6\n",
            "{'F', 'B', 'A', 'C'}\n",
            "<class 'list'> ['A', 'A', 'B', 'C', 'C', 'F']\n",
            "<class 'set'> {'F', 'B', 'A', 'C'}\n",
            "{'F', 'A', 'G', 'B', 'C'}\n",
            "4 {'A', 'G', 'B', 'C'}\n",
            "['red', 'blue', 'orange'] ['orange', 'grapes', 'apples']\n",
            "{'blue', 'red', 'orange'} {'apples', 'orange', 'grapes'}\n",
            "{'blue', 'apples', 'red', 'orange', 'grapes'}\n",
            "{'orange'}\n",
            "{'apples', 'grapes'}\n",
            "17\n",
            "Virat\n",
            "50.0\n",
            "11\n",
            "Virat\n",
            "50.0\n",
            "Bangalore\n",
            "(('Bangalore', 28.9949521, 72), ('Chennai', 30.01, 74))\n",
            "<class 'tuple'>\n",
            "<class 'tuple'>\n",
            "<class 'str'>\n",
            "<class 'list'>\n",
            "{'actor': 'amir', 'animal': 'cat', 'earth': 2, 'list': [23, 32, 12], 'singer': 'Kr$na', 'album': 'Still here', 'genre': 'hip-hop'}\n",
            "dict_keys(['actor', 'animal', 'earth', 'list', 'singer', 'album', 'genre'])\n",
            "dict_values(['amir', 'cat', 2, [23, 32, 12], 'Kr$na', 'Still here', 'hip-hop'])\n",
            "actor ----> amir\n",
            "animal ----> cat\n",
            "earth ----> 2\n",
            "list ----> [23, 32, 12]\n",
            "singer ----> Kr$na\n",
            "album ----> Still here\n",
            "genre ----> hip-hop\n",
            "{'C': 2, 'o': 6, 'r': 4, 'n': 3, 'a': 2, 'v': 1, 'i': 1, 'u': 3, 's': 3, ' ': 5, 'e': 2, 'd': 4, 'L': 1, 'c': 1, 'k': 1, 'w': 1, 'A': 1, 'T': 1, 'h': 1, 'W': 1, 'l': 1, '.': 1}\n"
          ]
        }
      ],
      "source": [
        "# create empty list, name it 'a'\n",
        "a = []\n",
        "\n",
        "# print the value of a\n",
        "print(a)\n",
        "\n",
        "# print the type of a\n",
        "print(type(a))\n",
        "\n",
        "# Create a list, languages = ['R','Python', 'SAS', 'Scala', 42]\n",
        "languages = ['R', 'Python', 'SAS', 'Scala', 42]\n",
        "\n",
        "# Print the number of elements in the list\n",
        "print(len(languages))\n",
        "\n",
        "# Using for loop iterate and print all the elements in the list\n",
        "for lang in languages:\n",
        "    print(lang)\n",
        "\n",
        "# Select the second item, 'Python' and store it in a new variable named 'temp'\n",
        "temp = languages[1]\n",
        "\n",
        "# Print the value of temp and type(temp)\n",
        "print(temp)\n",
        "print(type(temp))\n",
        "\n",
        "# Append the element 'Java' in the list\n",
        "languages.append('Java')\n",
        "\n",
        "# Remove the element 42 from the list and print the list\n",
        "languages.remove(42)\n",
        "print(languages)\n",
        "\n",
        "# Create a list, colors = ['Red', 'Blue', 'White']\n",
        "colors = ['Red', 'Blue', 'White']\n",
        "\n",
        "# Append the element 'Black' to colors\n",
        "colors.append('Black')\n",
        "\n",
        "# Append the color 'Orange' to second position (index=1) and print the list\n",
        "colors.insert(1, 'Orange')\n",
        "print(colors)\n",
        "\n",
        "# Print the list\n",
        "print(colors)\n",
        "\n",
        "# Create another list, colors2 = ['Grey', 'Sky Blue']\n",
        "colors2 = ['Grey', 'Sky Blue']\n",
        "\n",
        "# Add the elements of colors2 to colors using extend function in the list\n",
        "colors.extend(colors2)\n",
        "\n",
        "# Print len of colors and its elements\n",
        "print(len(colors), colors)\n",
        "\n",
        "# Sort the list and print it.\n",
        "colors.sort()\n",
        "print(colors)\n",
        "\n",
        "# Create a string, sent = 'Coronavirus Caused Lockdowns Around The World.'\n",
        "sent = 'Coronavirus Caused Lockdowns Around The World.'\n",
        "\n",
        "# Use split function to convert the string into a list of words and save it in variable words and print the same\n",
        "words = sent.split()\n",
        "print(words)\n",
        "\n",
        "# Convert each word in the list to lower case and store it in variable words_lower. Print words_lower\n",
        "words_lower = [word.lower() for word in words]\n",
        "print(words_lower)\n",
        "\n",
        "# Check whether 'country' is in the list\n",
        "print('country' in words_lower)\n",
        "\n",
        "# Remove the element 'the' from the list and print the list.\n",
        "words_lower.remove('the')\n",
        "print(words_lower)\n",
        "\n",
        "# Select the first 4 words from the list words_lower using slicing and store them in a new variable x4\n",
        "x4 = words_lower[:4]\n",
        "\n",
        "# print x4\n",
        "print(x4)\n",
        "\n",
        "# Convert the list of elements to single string using join function and print it\n",
        "print(\" \".join(words_lower))\n",
        "\n",
        "# Create stud_grades = ['A','A','B','C','C','F']\n",
        "stud_grades = ['A', 'A', 'B', 'C', 'C', 'F']\n",
        "\n",
        "# Print the len of stud_grades\n",
        "print(len(stud_grades))\n",
        "\n",
        "# Create a new variable, stud_grades_set = set(stud_grades)\n",
        "stud_grades_set = set(stud_grades)\n",
        "\n",
        "# Print stud_grades_set.\n",
        "print(stud_grades_set)\n",
        "\n",
        "# print the type of stud_grades and stud_grades_set and print their corresponding elements. Try to understand the difference between them.\n",
        "print(type(stud_grades), stud_grades)\n",
        "print(type(stud_grades_set), stud_grades_set)\n",
        "\n",
        "# Add a new element 'G' to stud_grades_set\n",
        "stud_grades_set.add('G')\n",
        "\n",
        "# Add element 'F' to stud_grades_set. and print it.\n",
        "stud_grades_set.add('F')\n",
        "print(stud_grades_set)\n",
        "\n",
        "# Remove 'F' from stud_grades_set\n",
        "stud_grades_set.remove('F')\n",
        "\n",
        "# Print the elements and the length of stud_grades_set\n",
        "print(len(stud_grades_set), stud_grades_set)\n",
        "\n",
        "# Create colors = ['red','blue','orange'], and fruits = ['orange','grapes','apples']\n",
        "colors = ['red', 'blue', 'orange']\n",
        "fruits = ['orange', 'grapes', 'apples']\n",
        "\n",
        "# Print color and fruits\n",
        "print(colors, fruits)\n",
        "\n",
        "# Create colors_set, and fruits_set. (using set() ) and print them\n",
        "colors_set = set(colors)\n",
        "fruits_set = set(fruits)\n",
        "print(colors_set, fruits_set)\n",
        "\n",
        "# Find the union of both the sets.\n",
        "print(colors_set.union(fruits_set))\n",
        "\n",
        "# Find the intersection of both the sets\n",
        "print(colors_set.intersection(fruits_set))\n",
        "\n",
        "# Find the elements which are Fruits but not colors (using set.difference() )\n",
        "print(fruits_set.difference(colors_set))\n",
        "\n",
        "# Create temp = [17, 'Virat', 50.0]\n",
        "temp = [17, 'Virat', 50.0]\n",
        "\n",
        "# Iterate through temp and print all the items in temp\n",
        "for item in temp:\n",
        "    print(item)\n",
        "\n",
        "# replace first element with 11 in temp\n",
        "temp[0] = 11\n",
        "\n",
        "# Set temp1 = tuple(temp)\n",
        "temp1 = tuple(temp)\n",
        "\n",
        "# Iterate through temp1 and print all the items in temp1.\n",
        "for item in temp1:\n",
        "    print(item)\n",
        "\n",
        "# Create city = (\"Bangalore\", 28.9949521, 72)\n",
        "city = (\"Bangalore\", 28.9949521, 72)\n",
        "\n",
        "# Print first element of city\n",
        "print(city[0])\n",
        "\n",
        "# Create city2 = ('Chennai', 30.01, 74)\n",
        "city2 = ('Chennai', 30.01, 74)\n",
        "\n",
        "# Create cities which consist of city and city2\n",
        "cities = (city, city2)\n",
        "\n",
        "# Print cities\n",
        "print(cities)\n",
        "\n",
        "# Print type of first element in cities\n",
        "print(type(cities[0]))\n",
        "\n",
        "# print the type of cities\n",
        "print(type(cities))\n",
        "\n",
        "# Create a dictionary d = {\"actor\":\"amir\",\"animal\":\"cat\",\"earth\":2,\"list\":[23,32,12]}\n",
        "d = {\"actor\": \"amir\", \"animal\": \"cat\", \"earth\": 2, \"list\": [23, 32, 12]}\n",
        "\n",
        "# Store the value of d['actor'] to a new variable actor.\n",
        "actor = d['actor']\n",
        "\n",
        "# Print the type of actor\n",
        "print(type(actor))\n",
        "\n",
        "# Store the value of d['list'] in new variable List.\n",
        "List = d['list']\n",
        "\n",
        "# Print the type of List.\n",
        "print(type(List))\n",
        "\n",
        "# Create d1 = { 'singer' : 'Kr$na' , 'album': 'Still here', 'genre' : 'hip-hop'}\n",
        "d1 = {'singer': 'Kr$na', 'album': 'Still here', 'genre': 'hip-hop'}\n",
        "\n",
        "# Merge d1 into d.\n",
        "d.update(d1)\n",
        "\n",
        "# print d\n",
        "print(d)\n",
        "\n",
        "# Print all the keys in d\n",
        "print(d.keys())\n",
        "\n",
        "# Print all the values in d\n",
        "print(d.values())\n",
        "\n",
        "# Iterate over d, and print each key, value pair as this - (actor ----> amir)\n",
        "for key, value in d.items():\n",
        "    print(f\"{key} ----> {value}\")\n",
        "\n",
        "# count the number of occurrences of characters in string named \"sent\" using dictionary and print the same.\n",
        "char_count = {}\n",
        "for char in sent:\n",
        "    char_count[char] = char_count.get(char, 0) + 1\n",
        "print(char_count)\n"
      ]
    }
  ]
}