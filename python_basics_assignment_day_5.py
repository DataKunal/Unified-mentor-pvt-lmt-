# -*- coding: utf-8 -*-
"""Python Basics Assignment Day 5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LfdDOk7UIa_hSc_Q6TJFm6Oech4el6rJ

<a id='1'></a><center> <h3 style="background-color:orange; color:white" ><br>Python Basics<br></h3>
"""

# What is your name! print your name!
# Only use one print function

"""* `()` <= `Parentheses`
* `''` <= `Single Quotes`
* `""` <= `Double Quotes`
* `\n` <= `New_line `
* `#` <= `Used to comment inside code`
"""

# define variables named as with values: mukesh=7, z=6, rohan=5, longitude=4

# print required variable
# output - 5

"""Variable Assignment:
**`Variable_Name = Value`**

Variables Naming Rules:
* `Python is case-senstive` => x=5 is different from X=5 (one is lowe and other is upper case)
* `var name can't start with special character except underscore(_)` => _X = 7 is `valid`, @X = 7 is `invalid`
* `var name can't start with number` => 9X = 7 is `invalid`, X9 = 7 is `valid`
* can't use `keywords` as a variable name
    *

# **`Declaring a Variable`** <br>
"""

# declare 4 variables with values as: ur_age 21,ur_weight 50.6, ur_first_name = 'Mukesh',ur_last_name = "Manral"

"""# **`Data Type(Type of variable)`**

| Name | Type | Description |
| ---- | ---- | ----|
|Integers | int | Integer number, like 34,-56 ...|
|Float | float | Decimal number, like 3.4,-5.6 ...|
|String| str | Ordered sequence of characters, like 'your name' |
|Boolean |bool |Logical values indicating True or False only |
"""

# print type of ur_age,ur_weight,ur_first_name,ur_last_name variables

# print values of ur_age,ur_weight,ur_first_name,ur_last_name variables

# make 2 variables with values as: ur_first_name 'Mukesh',ur_last_name'Mukesh'

# make a variable TrueOrFalse which will have comparison of variables ur_last_name == ur_first_name



# define a variable name "x" and assign value 777 and print it

"""* To view some data on screen, python have `print` function
    * Using `print` function we can control view on output screen

"""



"""`Operators`: Symbols that represent mathematical or logical tasks

Example:<br>
`700` `+` `77`<br>
* `+` <= Operator
* `700` & `77` <= Operands

"""

# Initialize variables [x,y,z,zz] with values
## x as 7 =>int ,
## y as 77 =>int,
## z as 77.7 => float,
## zz as 'Hi' => string

"""# **`Arithmetic Operators`**"""

# add x and z

# subtract z and y

# Multiply x and z

# Exponent (raise the power or times) x times z

# division on x and z

"""`//` => divides and returns integer value of quotient
* It will dump digits after decimal
"""

# floor division(ignores decimal) on x and z (gives quotient)

# Modulo(gives remainder) on x and z

"""# **`Comparison Operators`**"""

# comapre and see if x is less then z
# can use '<' symbol

# check the type of above comaprison where it says comapre and see if x is less then z

"""* `Bool` => takes two values, either `True` or `False`"""

# compare and see if x is less then or equall to z
# can use '<=' symbol

# comapre and see if x equall to z
# can use '==' symbol

# comapre and see if x is greater than z
# can use '>' symbol

# comapre and see if x is greater than or equall to z
# can use '>=' symbol

# comapre and see if x is Not equall to z
# can use '!=' symbol

"""# **`Logical Operators`**"""

# compare if 108 is equall to 108, 21 is equall to 21 using logical and
# equall to => '=='
# logical and => and

# in and both condition must be True to get a True

# how above condition can give False as output show all those conditions

# compare if 108 is equall to 108, 21 is equall to 11 using logical or
# equall to => '=='
# logical or => or

# in or Only one condition need to be True to get a True

# this is for you to understand it
(108 == 108) or (21 == 11) or (108 <= 11)



"""# **`if`--- `else`** => to handle single condition <br>
# **`if`--- `elif`--- `else`** => to handle Multiple condition

`Observe in Python code:`
* `if` => statement in python
* `else` => statement in python
* `:` => colon => denotes start of if block i.e. any line written after colon belong to if condition
* `....` => see then as indentation i.e. 4 spaces => indentation indicates all code belong to only if and then another indentation indicates code for only else block
"""

# make variable with value as : money 100000

# see output of money > 2000

# assign money variable value of 10000
##### say you have this much ammount in your account

# start of if condition
# if money is greater then 1000 which is data science course free
# if money > 1000 is false i.e. you have less money then 1000 in your account then else will work for now only if is working

# take a test_score variable with 80 in it.

# if test_score greater then 80 then print A grade
# elif test_score greater then 60 and less then 80 print B grade
# else print Nothing for you



"""# **`Python Loops`**

for iterating_variable in sequence:
    statement(s)
"""

for iterating_variable in range(10):
    print(iterating_variable)

# print 'I love sports' 10 times using for loop

"""`10` => `stoping criteria` of, for loop

* `in` => keyword
* `sequence` => on which to itterate
* `:` => colon , start of for loop

`!=` = not equall to => `behaves as a stoping criteria`
"""

# Syntax of while loop
"""
while comparison:
    statements(s)
"""

# while loop

# save 0 in variable number

# print till 10 using while loop

"""* Initialized variable `number = 0` and then increment it's value in each iteration
* Loop will only continue to run only if value is less than 10

# **`Type of Jump Statements`** <br>
`Break Statement`
`Continue Statement`

# **`Break Statement`**
"""

# example that uses break statement in a for loop

# take range(10) and print 'The number is' + value
# break when num equals 5

"""# **`Continue Statement`**

"""

# Using same `for loop program` as in Break Statement section above
# Use a continue statement rather than a break statement

# take range(10) and print 'The number is' + value
# continue when num equals 5



"""# **`String Manipulation`**"""

string_ = '' or "" or """ """

# define a string variable with "We are creating next generation data science eco-system at CollegeRanker"

# Find length of string including spaces

# Access characters in a string with indexing i.e string[0]

# Access characters with negative indexing i.e string[-1]

"""# String Slicing"""

# select string from first to 6th element i.e string[:6]

# select string from 7th to negative 10th element i.e string[7:-10]

"""Count of a particular `character` in a string"""



"""Count of a particular `sub-string` in a string"""



"""Find a substring in string using `find` and `index` function"""

# .find() => if present it will return starting index, not found then it will return -1
# .index() => if present it will return starting index, not found then it will give error

### Checking whether string `startswith` or `endswith` a particular substring or not



### Converting string to upper case ###

### Converting only first character of string to upper case

### Checking if string is in lower case or upper case

### Checking if string is digit, alpabetic, alpha-numeric

# assign "C++ is easy to learn" to a new_str variable

### Replace C++ with Python

### Use Split function on new_str ###

"""# **`Python Functions`**

def function_name():
    stetement(s)
"""

# define a function with welcome_message(name) and body 'Welcome to Functions !!!'

# call a function with your name

"""* `def` Keyword marking start of function
* `function name` to uniquely identify function
    * `function naming` follows same `rules of writing identifiers`
* `parameters`(arguments) to pass values to a function => totally optional
* `()` paranthesis
* `colon (:)` start of function
* `documentation string`(docstring) describe's what function does => totally optional
* `return statement` returns a value from function => totally optional
* inside colon is `function definition` it should always be present before function call or get an error
"""

# Write a function to add two number which are as 3 and 4
# in total variable store adition of 3 + 4
# print total variable

"""# ***`Positional Arguments`***
Most arguments are identified by their position in function call
* Say `print(x,y)` will give different results from `print(y,x)`

What ever sequence is given while defining a function values must be taken in that sequence only
* Otherwise use argument name **`(keyword arguments)`** to take values
* We first define `positional argument` and then `keyword arguments`

"""

## Create substraction_function(small_number,large_number) and return difference between large_number and small_number

# pass arguments in right order

# always pass arguments using there name(keyword arguments) then order does not matter



"""# ***`Scope of Variables`*** means that part of program where we can access particular variable
* `Local Variable` => variables defined inside a function and can be only accessed from inside of that particular function
* `Global Variable` => variables defined outside a function and can be accessed throughout program

Let's define a global variable, `"global_variable"` outside function
* We will return its value using a function `"randome_function"` and see that we would be able to access its value using that function also
"""

#### Observe every output from here onwords #####
# defining a global variable
global_variable = 'variable outside of function'

# defining function
def random_function():
    # accessing variable which is outside of this function
    return global_variable

random_function()

"""`See we can acess the data of golbal variable from Inside of the Function`

# **`=> Let's see what will happen if we try to change value of global variable from Inside of the Function`**
"""

#### Observe every output from here onwords #####
# defining a global variable
global_variable = 'variable outside of function'

# defining function
def random_function():
    # changing value of global variable from inside of the function
    global_variable = 'changing variable outside of function from inside of function'
    # accessing variable which is outside of this function
    return global_variable

print(random_function())
print(global_variable)



