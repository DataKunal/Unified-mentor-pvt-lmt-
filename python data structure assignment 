{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOudnnhKRlvWXkehNZlkt8n",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DataKunal/Unified-mentor-pvt-lmt-/blob/main/python%20data%20structure%20assignment%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3aoN8rhjSl59",
        "outputId": "3d55b54b-8f8c-472a-8784-1d1b5bc663c4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[]\n",
            "<class 'list'>\n",
            "5\n",
            "R\n",
            "Python\n",
            "SAS\n",
            "Scala\n",
            "42\n",
            "Python <class 'str'>\n",
            "['R', 'Python', 'SAS', 'Scala', 'Java']\n",
            "['Red', 'Orange', 'Blue', 'White', 'Black']\n",
            "7 ['Red', 'Orange', 'Blue', 'White', 'Black', 'Grey', 'Sky Blue']\n",
            "['Black', 'Blue', 'Grey', 'Orange', 'Red', 'Sky Blue', 'White']\n",
            "['Coronavirus', 'Caused', 'Lockdowns', 'Around', 'The', 'World.']\n",
            "['coronavirus', 'caused', 'lockdowns', 'around', 'the', 'world.']\n",
            "False\n",
            "['coronavirus', 'caused', 'lockdowns', 'around', 'world.']\n",
            "['coronavirus', 'caused', 'lockdowns', 'around']\n",
            "coronavirus caused lockdowns around\n",
            "6\n",
            "{'C', 'B', 'F', 'A'}\n",
            "<class 'list'> <class 'set'>\n",
            "['A', 'A', 'B', 'C', 'C', 'F'] {'C', 'B', 'F', 'A'}\n",
            "{'F', 'C', 'G', 'B', 'A'}\n",
            "{'C', 'G', 'B', 'A'} 4\n",
            "['red', 'blue', 'orange'] ['orange', 'grapes', 'apples']\n",
            "{'orange', 'blue', 'red'} {'orange', 'apples', 'grapes'}\n",
            "{'orange', 'red', 'grapes', 'apples', 'blue'}\n",
            "{'orange'}\n",
            "{'apples', 'grapes'}\n",
            "17\n",
            "Virat\n",
            "50.0\n",
            "11\n",
            "Virat\n",
            "50.0\n",
            "Bangalore\n",
            "(('Bangalore', 28.9949521, 72), ('Chennai', 30.01, 74))\n",
            "<class 'tuple'>\n",
            "<class 'tuple'>\n",
            "<class 'str'>\n",
            "<class 'list'>\n",
            "{'actor': 'amir', 'animal': 'cat', 'earth': 2, 'list': [23, 32, 12], 'singer': 'Kr$na', 'album': 'Still here', 'genre': 'hip-hop'}\n",
            "dict_keys(['actor', 'animal', 'earth', 'list', 'singer', 'album', 'genre'])\n",
            "dict_values(['amir', 'cat', 2, [23, 32, 12], 'Kr$na', 'Still here', 'hip-hop'])\n",
            "actor ----> amir\n",
            "animal ----> cat\n",
            "earth ----> 2\n",
            "list ----> [23, 32, 12]\n",
            "singer ----> Kr$na\n",
            "album ----> Still here\n",
            "genre ----> hip-hop\n",
            "{'C': 2, 'o': 6, 'r': 4, 'n': 3, 'a': 2, 'v': 1, 'i': 1, 'u': 3, 's': 3, ' ': 5, 'e': 2, 'd': 4, 'L': 1, 'c': 1, 'k': 1, 'w': 1, 'A': 1, 'T': 1, 'h': 1, 'W': 1, 'l': 1, '.': 1}\n"
          ]
        }
      ],
      "source": [
        "# Lists\n",
        "a = []  # create empty list, name it 'a'\n",
        "print(a)  # print the value of a\n",
        "print(type(a))  # print the type of a\n",
        "\n",
        "languages = ['R', 'Python', 'SAS', 'Scala', 42]\n",
        "print(len(languages))  # Print the number of elements in the list\n",
        "\n",
        "for lang in languages:\n",
        "    print(lang)  # Iterate and print all elements\n",
        "\n",
        "temp = languages[1]  # Select second item\n",
        "print(temp, type(temp))  # Print value and type\n",
        "\n",
        "languages.append('Java')  # Append 'Java'\n",
        "languages.remove(42)  # Remove 42\n",
        "print(languages)\n",
        "\n",
        "colors = ['Red', 'Blue', 'White']\n",
        "colors.append('Black')  # Append 'Black'\n",
        "colors.insert(1, 'Orange')  # Insert 'Orange' at index 1\n",
        "print(colors)\n",
        "\n",
        "colors2 = ['Grey', 'Sky Blue']\n",
        "colors.extend(colors2)  # Extend list\n",
        "print(len(colors), colors)  # Print length and elements\n",
        "\n",
        "colors.sort()  # Sort the list\n",
        "print(colors)\n",
        "\n",
        "sent = 'Coronavirus Caused Lockdowns Around The World.'\n",
        "words = sent.split()  # Split sentence into words\n",
        "print(words)\n",
        "\n",
        "words_lower = [word.lower() for word in words]  # Convert to lowercase\n",
        "print(words_lower)\n",
        "\n",
        "print('country' in words)  # Check 'country' in list\n",
        "\n",
        "words_lower.remove('the')  # Remove 'the'\n",
        "print(words_lower)\n",
        "\n",
        "x4 = words_lower[:4]  # Select first 4 words\n",
        "print(x4)\n",
        "\n",
        "joined_str = \" \".join(x4)  # Join list to string\n",
        "print(joined_str)\n",
        "\n",
        "# Sets\n",
        "stud_grades = ['A', 'A', 'B', 'C', 'C', 'F']\n",
        "print(len(stud_grades))  # Print length\n",
        "\n",
        "stud_grades_set = set(stud_grades)\n",
        "print(stud_grades_set)  # Print unique values\n",
        "\n",
        "print(type(stud_grades), type(stud_grades_set))  # Print types\n",
        "print(stud_grades, stud_grades_set)\n",
        "\n",
        "stud_grades_set.add('G')  # Add 'G'\n",
        "stud_grades_set.add('F')  # Add 'F' (already present)\n",
        "print(stud_grades_set)\n",
        "\n",
        "stud_grades_set.remove('F')  # Remove 'F'\n",
        "print(stud_grades_set, len(stud_grades_set))\n",
        "\n",
        "colors = ['red', 'blue', 'orange']\n",
        "fruits = ['orange', 'grapes', 'apples']\n",
        "print(colors, fruits)\n",
        "\n",
        "colors_set = set(colors)\n",
        "fruits_set = set(fruits)\n",
        "print(colors_set, fruits_set)\n",
        "\n",
        "print(colors_set.union(fruits_set))  # Union\n",
        "print(colors_set.intersection(fruits_set))  # Intersection\n",
        "print(fruits_set.difference(colors_set))  # Difference\n",
        "\n",
        "# Tuples\n",
        "temp = [17, 'Virat', 50.0]\n",
        "for item in temp:\n",
        "    print(item)  # Iterate and print items\n",
        "\n",
        "temp[0] = 11  # Replace first element\n",
        "temp1 = tuple(temp)\n",
        "for item in temp1:\n",
        "    print(item)  # Print tuple items\n",
        "\n",
        "# temp1[0] = 17  # Uncommenting this will raise an error\n",
        "\n",
        "city = (\"Bangalore\", 28.9949521, 72)\n",
        "print(city[0])  # Print first element\n",
        "\n",
        "city2 = ('Chennai', 30.01, 74)\n",
        "cities = (city, city2)  # Create nested tuple\n",
        "print(cities)\n",
        "print(type(cities[0]))  # Type of first element\n",
        "print(type(cities))  # Type of cities\n",
        "\n",
        "# Dictionary\n",
        "d = {\"actor\": \"amir\", \"animal\": \"cat\", \"earth\": 2, \"list\": [23, 32, 12]}\n",
        "# print(d[0])  # Uncommenting this will raise an error\n",
        "\n",
        "actor = d['actor']  # Store value\n",
        "print(type(actor))\n",
        "\n",
        "List = d['list']\n",
        "print(type(List))\n",
        "\n",
        "d1 = {'singer': 'Kr$na', 'album': 'Still here', 'genre': 'hip-hop'}\n",
        "d.update(d1)  # Merge dictionaries\n",
        "print(d)\n",
        "\n",
        "print(d.keys())  # Print keys\n",
        "print(d.values())  # Print values\n",
        "\n",
        "for key, value in d.items():\n",
        "    print(f\"{key} ----> {value}\")  # Iterate and print key-value pairs\n",
        "\n",
        "sent = \"Coronavirus Caused Lockdowns Around The World.\"\n",
        "char_count = {}\n",
        "for char in sent:\n",
        "    char_count[char] = char_count.get(char, 0) + 1  # Count occurrences\n",
        "print(char_count)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5Xn6oDJlSrrv"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}